# coding: shift_jis
require "sdl"
require 'dxruby'

Window.caption = "ruby_shooooooting" # ウィンドウのキャプション設定
Window.width = 720        # ウィンドウの横サイズ設定
Window.height = 720       # ウィンドウの縦サイズ設定
Input.setRepeat(0, 5)     # キーのオートリピート設定。5 フレームに 1 回 on

# 矩形衝突判定
class CollisionBox
  attr_accessor :del, :obj, :x1, :y1, :x2, :y2, :x, :y

  # 初期化。??_offsetにはキャラの原点からの範囲座標（左上と右下）がセットされる
  def initialize(obj, x1, y1, x2, y2)
    @obj = obj
    @x1_offset = x1
    @y1_offset = y1
    @x2_offset = x2
    @y2_offset = y2
    @del = false
  end

  # キャラの座標セット
  def set(x, y)
    @x1 = x + @x1_offset
    @y1 = y + @y1_offset
    @x2 = x + @x2_offset
    @y2 = y + @y2_offset
    @del = false
  end

  # 判定範囲削除。これの実行以降は判定が省略される
  def delete
    @del = true
  end
end

# 衝突判定モジュール
module Collision
  def self.check(a, b)
    # 配列じゃないときはとりあえず配列化
    a = [a] if a.class != Array
    b = [b] if b.class != Array

    # 攻撃側ループ
    a.each do |o|
      next if o.del # 消えてたら何もしない

      # 防御側ループ
      b.each do |d|
        next if d.del # 消えてたら何もしない
        if o.x1 <= d.x2 and o.y1 <= d.y2 and o.x2 >= d.x1 and o.y2 >= d.y1
          o.obj.shot(d.obj) if o.obj != nil # 攻撃側のshotメソッドを呼ぶ
          d.obj.hit(o.obj)  if d.obj != nil # 防御側のhitメソッドを呼ぶ
        end
        break if o.del # 攻撃側が消えたらループ終了
      end
    end
  end
end


class EnemyShot1
  @@image = Image.load("image/enemyshot1.png")
  attr_accessor :delete

  # インスタンス初期化
  def initialize(x, y, angle)
    @x = x
    @y = y
    @dx = Math.cos(angle / 180.0 * Math::PI)
    @dy = Math.sin(angle / 180.0 * Math::PI)
    @collision = CollisionBox.new(self, 4, 4, 11, 11)
    @delete = false
    @angle = angle
  end

  # 更新
  def update
    @x += $myship.delta_x
    @x += @dx * 10
    @y += @dy * 10
    if @x < -16 or @x > 720 or @y < -16 or @y > 960
      @delete = true
    else
      @collision.set(@x, @y)
      Collision_EnemyShot.push(@collision)
    end
  end

  def shot(obj)
    @delete = true
    @collision.delete
    Collision_EnemyShot.push(@collision)
  end

  # 描画
  def draw
    Window.draw(@x, @y, @@image)
  end
end

class EnemyShot2
  @@image = Image.load("image/enemyshot2.png")
  attr_accessor :delete

  # インスタンス初期化
  def initialize(x, y, angle)
    @x = x
    @y = y
    @dx = Math.cos(angle / 180.0 * Math::PI)
    @dy = Math.sin(angle / 180.0 * Math::PI)
    @collision = CollisionBox.new(self, 6, 6, 17, 17)
    @delete = false
    @angle = angle
  end

  # 更新
  def update
    @x += $myship.delta_x
    @x += @dx * 5
    @y += @dy * 5
    if @x < -16 or @x > 720 or @y < -16 or @y > 960
      @delete = true
    else
      @collision.set(@x, @y)
      Collision_EnemyShot.push(@collision)
    end
  end

  def shot(obj)
    @delete = true
    @collision.delete
    Collision_EnemyShot.push(@collision)
  end

  # 描画
  def draw
    Window.draw(@x, @y, @@image)
  end
end

class EnemyShot3
  @@image = Image.load("image/13.png")
  attr_accessor :delete

  # インスタンス初期化
  def initialize(x, y, angle)
    @x = x
    @y = y
    @dx = Math.cos(angle / 180.0 * Math::PI)
    @dy = Math.sin(angle / 180.0 * Math::PI)
    @collision = CollisionBox.new(self, 5, 5, 11, 11)
    @delete = false
    @angle = angle
  end

  # 更新
  def update
    @x += $myship.delta_x
    @x += @dx * 5
    @y += @dy * 5
    if @x < -16 or @x > 720 or @y < -16 or @y > 960
      @delete = true
    else
      @collision.set(@x, @y)
      Collision_EnemyShot.push(@collision)
    end
  end

  def shot(obj)
    @delete = true
    @collision.delete
    Collision_EnemyShot.push(@collision)
  end

  # 描画
  def draw
    Window.draw(@x, @y, @@image)
  end
end

class EnemyShot4
  @@image = Image.load("image/21.png")
  attr_accessor :delete

  # インスタンス初期化
  def initialize(x, y, angle)
    @x = x
    @y = y
    @dx = Math.cos(angle / 180.0 * Math::PI)
    @dy = Math.sin(angle / 180.0 * Math::PI)
    @collision = CollisionBox.new(self, 3, 3, 8, 8)
    @delete = false
    @angle = angle
  end

  # 更新
  def update
    @x += $myship.delta_x
    @x += @dx * 7
    @y += @dy * 7
    if @x < -16 or @x > 720 or @y < -16 or @y > 720
      @delete = true
    else
      @collision.set(@x, @y)
      Collision_EnemyShot.push(@collision)
    end
  end

  def shot(obj)
    @delete = true
    @collision.delete
    Collision_EnemyShot.push(@collision)
  end

  # 描画
  def draw
    Window.draw(@x, @y, @@image)
  end
end


class Enemy
  # 画像読み込み
  @@image = Image.load("image/enemy.png")

  attr_accessor :delete, :hp, :time ,:best_time

  # インスタンス初期化
  def initialize
    @x = 270  # x座標
    @y = 30  # y座標
    @collision = CollisionBox.new(self, 0, 0, 200, 200) # 衝突判定オブジェクト
    @hp = 2000         # ヒットポイント
    @delete = false  # 消えたらtrue
    @shotcount = 0   # 弾を撃つ間隔を測るカウンタ
    @shotcount2 = 0
    @angle4 = 0
    @angle3 = 0
    @best_time = nil
    @time = 0
  end

  # 更新
  def update
    # 弾を撃つ判定
    @shotcount += 1
    @shotcount2 += 1
    @angle3 += @shotcount
    @angle4 -= @shotcount
    if @shotcount > 5
      # 角度計算
      angle = (Math.atan2($myship.y + 10  - (@y ), $myship.x + 10 - (@x )) / Math::PI * 180)

      # 弾を撃つ
      ObjectGroup.push(EnemyShot1.new(@x + 16, @y + 24, angle))

      # カウント初期化
      @shotcount = 0
    end
    if @shotcount2 % 300 == 0
      angle = (Math.atan2($myship.y + 10 - (@y), $myship.x + 10 - (@x)) / Math::PI * 180)
      ObjectGroup.push(EnemyShot2.new(@x + 150, @y + 40, angle - 45))
      ObjectGroup.push(EnemyShot2.new(@x + 150, @y + 40, angle - 22.5))
      ObjectGroup.push(EnemyShot2.new(@x + 150, @y + 40, angle))
      ObjectGroup.push(EnemyShot2.new(@x + 150, @y + 40, angle + 22.5))
      ObjectGroup.push(EnemyShot2.new(@x + 150, @y + 40, angle + 45))
      @shotcount2 -=50
    end

    if @hp <= 800
      if @shotcount % 2 == 1
        ObjectGroup.push(EnemyShot3.new(@x + 80, @y + 90, @angle3))
        if @angle3 >=360
          @angle3 -= 360
        end
      end
    end

    if @hp <= 350
      ObjectGroup.push(EnemyShot4.new(@x + 80, @y + 90, @angle4))
      ObjectGroup.push(EnemyShot4.new(@x + 80, @y + 90, @angle4+180))
      if @angle4 <= -360
        @angle4 += 360
      end
    end

    # 衝突判定設定
    @collision.set(@x, @y)
    Collision_Enemy.push(@collision)

  end

  # 自機ショットに当たったときに呼ばれるメソッド
  def hit(obj)
    # HPを減らす
    @hp = @hp - obj.damage

    # やられ処理
    if @hp <= 0
      @delete = true
      @collision.delete
      @best_time = @time
    end
  end

  def draw
    Window.draw(@x, @y, @@image)
  end
end


class MyShot
  @@image = Image.load("image/myshot.png")
  attr_accessor :delete, :damage

  # インスタンス初期化
  def initialize(x, y, angle)
    @x = x   # x座標
    @y = y   # y座標
    @dx = Math.cos(angle / 180.0 * Math::PI) # 横移動量
    @dy = Math.sin(angle / 180.0 * Math::PI) # 縦移動量
    @collision = CollisionBox.new(self, 0, 0, 31, 31) # 衝突判定オブジェクト
    @delete = false # ショットが消えたときにtrue
    @damage = 5     # 敵に当たったときに与えるダメージ
    @angle = angle  # 角度
  end

  # 更新
  def update
    # ショット移動
    @x += @dx * 16
    @y += @dy * 16

    # 画面外判定
    if @x < -32 or @x > 720 or @y < -32
      @delete = true                       # 画面外なら消える
    else
      @collision.set(@x, @y)               # 画面内なら判定範囲移動
      Collision_MyShot.push(@collision)    # 判定範囲の配列に追加
    end
  end

  # 敵に当たったときに呼ばれるメソッド
  def shot(obj)
    @delete = true
    @collision.delete
    Collision_MyShot.push(@collision)
  end

  # 描画
  def draw
    Window.draw(@x, @y, @@image)
  end
end


# 自機
class MyShip
  attr_accessor :x, :y, :collision, :delta_x, :delete, :bom_cnt
  # 画像読み込み
  @@image = Image.load("image/myship.png")

  # 初期化処理
  def initialize
    @x = 365          # x 座標
    @y = 680          # y 座標
    @oldx = 365       # 前フレームのx座標
    @delete = false   # 自機が消えたときは true
    @collision = CollisionBox.new(nil, 25, 18, 35, 35)  # 衝突判定オブジェクト
    @death_cnt = 0
    @bom_cnt = 0
  end

  def update
    if @death_cnt >= 1
      @death_cnt += 1
      if Input.pad_down?(P_BUTTON1) then
        @death_cnt = 0
        @bom_cnt += 1
      end
      if @death_cnt > 5
        @delete = true
        @collision.delete
        @death_cnt = 0
      end
    end

    # 移動
    if Input.pad_down?(P_BUTTON2) then
      dx = Input.x * 3.5
      dy = Input.y * 5
        if Input.x != 0 and Input.y != 0   # ナナメの時は 0.7 倍
          dx *= 0.7
          dy *= 0.7
        end
      else
        dx = Input.x * 8
        dy = Input.y * 10
      if Input.x != 0 and Input.y != 0   # ナナメの時は 0.7 倍
        dx *= 0.7
        dy *= 0.7
      end
    end
      @x += dx
      @y += dy

      @x = -15 if x < -15
      @x = 720 - 48 if @x > 720 - 48
      @y = 0 if y < 0
      @y = 720 - 32 if @y > 720 - 32

    # 衝突判定範囲の移動
    @collision.set(@x, @y)

    # ショット
    if Input.padPush?(P_BUTTON0)
      ObjectGroup.push(MyShot.new(@x - 18, @y - 32, 270))
      ObjectGroup.push(MyShot.new(@x + 18, @y - 32, 270))
      ObjectGroup.push(MyShot.new(@x - 18, @y - 25, 270))
      ObjectGroup.push(MyShot.new(@x + 18, @y - 25, 270))
      ObjectGroup.push(MyShot.new(@x + 32, @y - 16, 285))
      ObjectGroup.push(MyShot.new(@x - 32, @y - 16, 255))
      ObjectGroup.push(MyShot.new(@x + 32, @y - 16, 300))
      ObjectGroup.push(MyShot.new(@x - 32, @y - 16, 240))
    end

    # 背景や敵などの横補正値計算
        @delta_x = -((@x - @oldx) / 5)
        @oldx = @x
  end

  # 描画
  def draw
    Window.draw(@x, @y, @@image)           # 自機
  end

  def hit(obj)
    @death_cnt += 1
  end
end





ObjectGroup = []          # オブジェクト配列
Collision_MyShot = []     # 弾の判定範囲配列
Collision_Enemy = []      # 敵の判定範囲配列
Collision_EnemyShot = []  # 敵の弾の判定範囲配列

$myship = MyShip.new      # 自機生成
$enemy = Enemy.new
ObjectGroup.push($myship) # 自機をオブジェクト配列に追加
ObjectGroup.push($enemy)
end_f = 0

Window.loop do

  ObjectGroup.each do |obj|
    obj.update
  end

  ObjectGroup.each do |obj|
    obj.draw
  end


  # 衝突判定
  Collision.check(Collision_MyShot, Collision_Enemy)      # 自機ショットと敵
  Collision.check(Collision_EnemyShot, $myship.collision) # 敵ショットと自機

  # 衝突判定配列初期化
  Collision_MyShot.clear
  Collision_Enemy.clear
  Collision_EnemyShot.clear

  # 移動や衝突判定で消えたキャラを配列から削除
  ObjectGroup.delete_if do |obj|
    obj.delete
  end

  break if Input.keyPush?(K_ESCAPE)

  font = Font.new(32)
  Window.draw_font(0,0,$enemy.hp.to_s,font)
  $enemy.time +=1
  time = $enemy.time / 60
  Window.draw_font(470,0,"経過時間: " + time.to_s,font)
  Window.draw_font(470,50,"喰らいボム数: " + $myship.bom_cnt.to_s,font)
  if $enemy.best_time != nil && end_f != 1
    $enemy.best_time = $enemy.time / 60
    end_f = 1
  end

  if $enemy.best_time != nil
    Window.draw_font(500,100,"クリア時間: " + $enemy.best_time.to_s,font)
  end
end
